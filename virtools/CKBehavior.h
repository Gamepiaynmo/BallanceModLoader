#pragma once

#include "CKDef.h"
#include "CKBeObject.h"

typedef int (*CKBEHAVIORFCT) (const CKBehaviorContext& context);
typedef CKERROR(*CKBEHAVIORCALLBACKFCT)	(const CKBehaviorContext& context);

class BML_EXPORT CKBehavior : public CKBeObject {
public:
	CK_BEHAVIOR_TYPE GetType();
	void SetType(CK_BEHAVIOR_TYPE);
	void SetFlags(CK_BEHAVIOR_FLAGS);
	CK_BEHAVIOR_FLAGS GetFlags();
	CK_BEHAVIOR_FLAGS ModifyFlags(CKDWORD Add, CKDWORD Remove);
	void UseGraph();
	void UseFunction();
	int IsUsingFunction();
	CKBOOL IsTargetable();
	CKBeObject* GetTarget();
	CKERROR UseTarget(CKBOOL Use = TRUE);
	CKBOOL IsUsingTarget();
	CKParameterIn* GetTargetParameter();
	void SetAsTargetable(CKBOOL target = TRUE);
	CKParameterIn* ReplaceTargetParameter(CKParameterIn* targetParam);
	CKParameterIn* RemoveTargetParameter();
	CK_CLASSID GetCompatibleClassID();
	void SetCompatibleClassID(CK_CLASSID);
	void SetFunction(CKBEHAVIORFCT fct);
	CKBEHAVIORFCT GetFunction();
	void SetCallbackFunction(CKBEHAVIORCALLBACKFCT fct);
	int CallCallbackFunction(CKDWORD Message);
	int CallSubBehaviorsCallbackFunction(CKDWORD Message, CKGUID* behguid = NULL);
	CKBOOL IsActive();
	int Execute(float deltat);
	CKBOOL IsParentScriptActiveInScene(CKScene* scn);
	int GetShortestDelay(CKBehavior* beh);
	CKBeObject* GetOwner();
	CKBehavior* GetParent();
	CKBehavior* GetOwnerScript();
	CKERROR InitFromPrototype(CKBehaviorPrototype* proto);
	CKERROR InitFromGuid(CKGUID Guid);
	CKERROR InitFctPtrFromGuid(CKGUID Guid);
	CKERROR InitFctPtrFromPrototype(CKBehaviorPrototype* proto);
	CKGUID GetPrototypeGuid();
	CKBehaviorPrototype* GetPrototype();
	CKSTRING GetPrototypeName();
	CKDWORD GetVersion();
	void SetVersion(CKDWORD version);
	void ActivateOutput(int pos, CKBOOL active = TRUE);
	CKBOOL IsOutputActive(int pos);
	CKBehaviorIO* RemoveOutput(int pos);
	CKERROR DeleteOutput(int pos);
	CKBehaviorIO* GetOutput(int pos);
	int GetOutputCount();
	int GetOutputPosition(CKBehaviorIO* pbio);
	int AddOutput(CKSTRING name);
	CKBehaviorIO* ReplaceOutput(int pos, CKBehaviorIO* io);
	CKBehaviorIO* CreateOutput(CKSTRING name);
	void InsertOutput(int pos, CKBehaviorIO* io);
	void ActivateInput(int pos, CKBOOL active = TRUE);
	CKBOOL IsInputActive(int pos);
	CKBehaviorIO* RemoveInput(int pos);
	CKERROR DeleteInput(int pos);
	CKBehaviorIO* GetInput(int pos);
	int GetInputCount();
	int GetInputPosition(CKBehaviorIO* pbio);
	int AddInput(CKSTRING name);
	CKBehaviorIO* ReplaceInput(int pos, CKBehaviorIO* io);
	CKBehaviorIO* CreateInput(CKSTRING name);
	void InsertInput(int pos, CKBehaviorIO* io);
	CKERROR ExportInputParameter(CKParameterIn* p);
	CKParameterIn* CreateInputParameter(CKSTRING name, CKParameterType type);
	CKParameterIn* CreateInputParameter(CKSTRING name, CKGUID guid);
	CKParameterIn* InsertInputParameter(int pos, CKSTRING name, CKParameterType type);
	void InsertInputParameter(int pos, CKParameterIn* in);
	void AddInputParameter(CKParameterIn* in);
	int GetInputParameterPosition(CKParameterIn*);
	CKParameterIn* GetInputParameter(int pos);
	CKParameterIn* RemoveInputParameter(int pos);
	CKParameterIn* ReplaceInputParameter(int pos, CKParameterIn* param);
	int GetInputParameterCount();
	CKERROR GetInputParameterValue(int pos, void* buf);
	void* GetInputParameterReadDataPtr(int pos);
	CKObject* GetInputParameterObject(int pos);
	CKBOOL IsInputParameterEnabled(int pos);
	void EnableInputParameter(int pos, CKBOOL enable);
	CKERROR ExportOutputParameter(CKParameterOut* p);
	CKParameterOut* CreateOutputParameter(CKSTRING name, CKParameterType type);
	CKParameterOut* CreateOutputParameter(CKSTRING name, CKGUID guid);
	CKParameterOut* InsertOutputParameter(int pos, CKSTRING name, CKParameterType type);
	void InsertOutputParameter(int pos, CKParameterOut* p);
	CKParameterOut* GetOutputParameter(int pos);
	int GetOutputParameterPosition(CKParameterOut*);
	CKParameterOut* ReplaceOutputParameter(int pos, CKParameterOut* p);
	CKParameterOut* RemoveOutputParameter(int pos);
	void AddOutputParameter(CKParameterOut* out);
	int GetOutputParameterCount();
	CKERROR GetOutputParameterValue(int pos, void* buf);
	CKERROR SetOutputParameterValue(int pos, const void* buf, int size = 0);
	void* GetOutputParameterWriteDataPtr(int pos);
	CKERROR SetOutputParameterObject(int pos, CKObject* obj);
	CKObject* GetOutputParameterObject(int pos);
	CKBOOL IsOutputParameterEnabled(int pos);
	void EnableOutputParameter(int pos, CKBOOL enable);
	void SetInputParameterDefaultValue(CKParameterIn* pin, CKParameter* plink);
	CKParameterLocal* CreateLocalParameter(CKSTRING name, CKParameterType type);
	CKParameterLocal* CreateLocalParameter(CKSTRING name, CKGUID guid);
	CKParameterLocal* GetLocalParameter(int pos);
	CKParameterLocal* RemoveLocalParameter(int pos);
	void AddLocalParameter(CKParameterLocal* loc);
	int GetLocalParameterPosition(CKParameterLocal*);
	int GetLocalParameterCount();
	CKERROR GetLocalParameterValue(int pos, void* buf);
	CKERROR SetLocalParameterValue(int pos, const void* buf, int size = 0);
	void* GetLocalParameterWriteDataPtr(int pos);
	void* GetLocalParameterReadDataPtr(int pos);
	CKObject* GetLocalParameterObject(int pos);
	CKERROR SetLocalParameterObject(int pos, CKObject* obj);
	CKBOOL IsLocalParameterSetting(int pos);
	CKParameterLocal* InsertLocalParameter(int pos, CKSTRING name, CKParameterType type);
	void InsertLocalParameter(int pos, CKParameterLocal* p);
	void Activate(CKBOOL Active = TRUE, CKBOOL breset = FALSE);
	CKERROR AddSubBehavior(CKBehavior* cbk);
	CKBehavior* RemoveSubBehavior(CKBehavior* cbk);
	CKBehavior* RemoveSubBehavior(int pos);
	CKBehavior* GetSubBehavior(int pos);
	int GetSubBehaviorCount();
	CKERROR AddSubBehaviorLink(CKBehaviorLink* cbkl);
	CKBehaviorLink* RemoveSubBehaviorLink(CKBehaviorLink* cbkl);
	CKBehaviorLink* RemoveSubBehaviorLink(int pos);
	CKBehaviorLink* GetSubBehaviorLink(int pos);
	int GetSubBehaviorLinkCount();
	CKERROR AddParameterOperation(CKParameterOperation* op);
	CKParameterOperation* GetParameterOperation(int pos);
	CKParameterOperation* RemoveParameterOperation(int pos);
	CKParameterOperation* RemoveParameterOperation(CKParameterOperation* op);
	int GetParameterOperationCount();
	int GetPriority();
	void SetPriority(int priority);
	float GetLastExecutionTime();

protected:
	CKBehavior() {};
	~CKBehavior() {};
};